using Microsoft.EntityFrameworkCore;
using Repositories.DatabaseConnection;
using Repositories.Interfaces;
using Repositories.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Implements
{
    public class DepositRepository : IDepositRepository
    {
        private readonly MerakiDbContext _context;
        public DepositRepository(MerakiDbContext context)
        {
            _context = context;
        }

        public async Task<DepositInformation> GetDepositInformationById(string depositId)
        {
            return await _context.DepositInformations.Include(d => d.User).FirstOrDefaultAsync(f => f.DepositId == depositId);
        }

        public async Task<List<DepositInformation>> GetAllDepositInformation()
        {
            return await _context.DepositInformations.Include(d => d.User).ToListAsync();
        }

        public async Task<DepositInformation> GetDepositInformationByUserId(string userId)
        {
            return await _context.DepositInformations.Include(d => d.User).FirstOrDefaultAsync(f => f.UserId == userId);
        }

        public async Task<string> GetLatestDepositInformationIdAsync()
        {
            try
            {

                // Fetch the relevant data from the database
                var depositInformationIds = await _context.DepositInformations
                    .Select(u => u.DepositId)
                    .ToListAsync();

                // Process the data in memory to extract and order by the numeric part
                var latestDepositId = depositInformationIds
                    .Select(id => new { DepositId = id, NumericPart = int.Parse(id.Substring(2)) })
                    .OrderByDescending(u => u.NumericPart)
                    .ThenByDescending(u => u.DepositId)
                    .Select(u => u.DepositId)
                    .FirstOrDefault();

                return latestDepositId;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message, e);
            }
        }


        public async Task<string> AutoGenerateDepositInformationId()
        {
            string newDepositId = "";
            string latestDepositId = await GetLatestDepositInformationIdAsync();
            if (string.IsNullOrEmpty(latestDepositId))
            {
                newDepositId = "DI00000001";
            }
            else
            {
                int numericpart = int.Parse(latestDepositId.Substring(2));
                int newnumericpart = numericpart + 1;
                newDepositId = $"DI{newnumericpart:d8}";
            }
            return newDepositId;
        }

        public async Task<DepositInformation> CreateDepositInformation(DepositInformation deposit)
        {
            await _context.DepositInformations.AddAsync(deposit);
            await _context.SaveChangesAsync();
            return deposit;
        }

        public async Task<dynamic> UpdateDepositInformation(DepositInformation deposit)
        {
            var existingDeposit = await _context.DepositInformations.FindAsync(deposit.DepositId);
            if (existingDeposit != null)
            {
                existingDeposit.Amount = deposit.Amount;
                existingDeposit.Status = deposit.Status;
                existingDeposit.CreatedAt = deposit.CreatedAt;
                await _context.SaveChangesAsync();
                return existingDeposit;
            }
            return null;
        }
    }
}
