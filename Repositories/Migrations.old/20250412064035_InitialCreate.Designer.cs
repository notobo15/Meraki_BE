// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.DatabaseConnection;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(MerakiDbContext))]
    [Migration("20250412064035_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("AC00000001")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586A61F0662");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = "AC00000001",
                            Address = "Ho Chi Minh",
                            Birthday = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duchao696@gmail.com",
                            FullName = "Nguyễn Văn A",
                            Gender = "Nam",
                            Password = "yK8/gC+JYpNvFdXRYr8nXhR60lKyKJxlbNCnZA4YfTk=",
                            Phone = 84901234567L,
                            Role = "Admin",
                            Status = "Active",
                            UserName = "user01"
                        },
                        new
                        {
                            AccountId = "AC00000002",
                            Address = "Hanoi",
                            Birthday = new DateTime(1990, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nhattulam12102003@gmail.com",
                            FullName = "Trần Thị B",
                            Gender = "Nữ",
                            Password = "yK8/gC+JYpNvFdXRYr8nXhR60lKyKJxlbNCnZA4YfTk=",
                            Phone = 84901234568L,
                            Role = "Seller",
                            Status = "Active",
                            UserName = "user02"
                        },
                        new
                        {
                            AccountId = "AC00000003",
                            Address = "Da Nang",
                            Birthday = new DateTime(1988, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user03@example.com",
                            FullName = "Lê Văn C",
                            Gender = "Nam",
                            Password = "Pass@123",
                            Phone = 84901234569L,
                            Role = "Customer",
                            Status = "Inactive",
                            UserName = "user03"
                        },
                        new
                        {
                            AccountId = "AC00000004",
                            Address = "Can Tho",
                            Birthday = new DateTime(1992, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user04@example.com",
                            FullName = "Phạm Thị D",
                            Gender = "Nữ",
                            Password = "Pass@123",
                            Phone = 84901234570L,
                            Role = "Seller",
                            Status = "Active",
                            UserName = "user04"
                        },
                        new
                        {
                            AccountId = "AC00000005",
                            Address = "Nha Trang",
                            Birthday = new DateTime(1985, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user05@example.com",
                            FullName = "Bùi Văn E",
                            Gender = "Nam",
                            Password = "Pass@123",
                            Phone = 84901234571L,
                            Role = "Customer",
                            Status = "Active",
                            UserName = "user05"
                        },
                        new
                        {
                            AccountId = "AC00000006",
                            Address = "Vinh",
                            Birthday = new DateTime(1993, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user06@example.com",
                            FullName = "Đặng Thị F",
                            Gender = "Nữ",
                            Password = "Pass@123",
                            Phone = 84901234572L,
                            Role = "Seller",
                            Status = "Inactive",
                            UserName = "user06"
                        },
                        new
                        {
                            AccountId = "AC00000007",
                            Address = "Hue",
                            Birthday = new DateTime(1987, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user07@example.com",
                            FullName = "Ngô Văn G",
                            Gender = "Nam",
                            Password = "Pass@123",
                            Phone = 84901234573L,
                            Role = "Customer",
                            Status = "Active",
                            UserName = "user07"
                        },
                        new
                        {
                            AccountId = "AC00000008",
                            Address = "Bac Giang",
                            Birthday = new DateTime(1994, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user08@example.com",
                            FullName = "Tô Thị H",
                            Gender = "Nữ",
                            Password = "Pass@123",
                            Phone = 84901234574L,
                            Role = "Seller",
                            Status = "Active",
                            UserName = "user08"
                        },
                        new
                        {
                            AccountId = "AC00000009",
                            Address = "Quang Ninh",
                            Birthday = new DateTime(1986, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user09@example.com",
                            FullName = "Hoàng Văn I",
                            Gender = "Nam",
                            Password = "Pass@123",
                            Phone = 84901234575L,
                            Role = "Customer",
                            Status = "Inactive",
                            UserName = "user09"
                        },
                        new
                        {
                            AccountId = "AC00000010",
                            Address = "Tay Ninh",
                            Birthday = new DateTime(1991, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            FullName = "Vũ Thị J",
                            Gender = "Nữ",
                            Password = "Pass@123",
                            Phone = 84901234576L,
                            Role = "Seller",
                            Status = "Active",
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("Repositories.Models.CardProvider", b =>
                {
                    b.Property<string>("CardProviderName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CpfullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPFullName");

                    b.HasKey("CardProviderName")
                        .HasName("PK__CardProv__3B8DEBCC9CD99C33");

                    b.ToTable("CardProvider", (string)null);

                    b.HasData(
                        new
                        {
                            CardProviderName = "VietinBank",
                            CpfullName = "Ngân hàng TMCP Công thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Vietcombank",
                            CpfullName = "Ngân hàng TMCP Ngoại Thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "BIDV",
                            CpfullName = "Ngân hàng TMCP Đầu tư và Phát triển Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Agribank",
                            CpfullName = "Ngân hàng Nông nghiệp và Phát triển Nông thôn Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "OCB",
                            CpfullName = "Ngân hàng TMCP Phương Đông"
                        },
                        new
                        {
                            CardProviderName = "MBBank",
                            CpfullName = "Ngân hàng TMCP Quân đội"
                        },
                        new
                        {
                            CardProviderName = "Techcombank",
                            CpfullName = "Ngân hàng TMCP Kỹ thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "ACB",
                            CpfullName = "Ngân hàng TMCP Á Châu"
                        },
                        new
                        {
                            CardProviderName = "VPBank",
                            CpfullName = "Ngân hàng TMCP Việt Nam Thịnh Vượng"
                        },
                        new
                        {
                            CardProviderName = "TPBank",
                            CpfullName = "Ngân hàng TMCP Tiên Phong"
                        },
                        new
                        {
                            CardProviderName = "Sacombank",
                            CpfullName = "Ngân hàng TMCP Sài Gòn Thương Tín"
                        },
                        new
                        {
                            CardProviderName = "HDBank",
                            CpfullName = "Ngân hàng TMCP Phát triển Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "VietCapitalBank",
                            CpfullName = "Ngân hàng TMCP Bản Việt"
                        },
                        new
                        {
                            CardProviderName = "SCB",
                            CpfullName = "Ngân hàng TMCP Sài Gòn"
                        },
                        new
                        {
                            CardProviderName = "VIB",
                            CpfullName = "Ngân hàng TMCP Quốc tế Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "SHB",
                            CpfullName = "Ngân hàng TMCP Sài Gòn - Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "Eximbank",
                            CpfullName = "Ngân hàng TMCP Xuất Nhập khẩu Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "MSB",
                            CpfullName = "Ngân hàng TMCP Hàng Hải"
                        },
                        new
                        {
                            CardProviderName = "CAKE",
                            CpfullName = "TMCP Việt Nam Thịnh Vượng - Ngân hàng số CAKE by VPBank"
                        },
                        new
                        {
                            CardProviderName = "Ubank",
                            CpfullName = "NgânTMCP Việt Nam Thịnh Vượng - Ngân hàng số Ubank by VPBank"
                        },
                        new
                        {
                            CardProviderName = "Timo",
                            CpfullName = "Ngân hàng số Timo by Ban Viet Bank (Timo by Ban Viet Bank)"
                        },
                        new
                        {
                            CardProviderName = "ViettelMoney",
                            CpfullName = "Tổng Công ty Dịch vụ số Viettel - Chi nhánh tập đoàn công nghiệp viễn thông Quân Đội"
                        },
                        new
                        {
                            CardProviderName = "VNPTMoney",
                            CpfullName = "VNPT Money"
                        },
                        new
                        {
                            CardProviderName = "SaigonBank",
                            CpfullName = "NgânNgân hàng TMCP Sài Gòn Công Thương"
                        },
                        new
                        {
                            CardProviderName = "BacABank",
                            CpfullName = "Ngân hàng TMCP Bắc Á"
                        },
                        new
                        {
                            CardProviderName = "PVcomBank",
                            CpfullName = "Ngân hàng TMCP Đại Chúng Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Oceanbank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Đại Dương"
                        },
                        new
                        {
                            CardProviderName = "NCB",
                            CpfullName = "Ngân hàng TMCP Quốc Dân"
                        },
                        new
                        {
                            CardProviderName = "ShinhanBank",
                            CpfullName = "Ngân hàng TNHH MTV Shinhan Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "ABBANK",
                            CpfullName = "Ngân hàng TMCP An Bình"
                        },
                        new
                        {
                            CardProviderName = "VietABank",
                            CpfullName = "Ngân hàng TMCP Việt Á"
                        },
                        new
                        {
                            CardProviderName = "NamABank",
                            CpfullName = "Ngân hàng TMCP Nam Á"
                        },
                        new
                        {
                            CardProviderName = "PGBank",
                            CpfullName = "Ngân hàng TMCP Xăng dầu Petrolimex"
                        },
                        new
                        {
                            CardProviderName = "VietBank",
                            CpfullName = "Ngân hàng TMCP Việt Nam Thương Tín"
                        },
                        new
                        {
                            CardProviderName = "BaoVietBank",
                            CpfullName = "Ngân hàng TMCP Bảo Việt"
                        },
                        new
                        {
                            CardProviderName = "SeABank",
                            CpfullName = "Ngân hàng TMCP Đông Nam Á"
                        },
                        new
                        {
                            CardProviderName = "COOPBANK",
                            CpfullName = "Ngân hàng Hợp tác xã Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "LienVietPostBank",
                            CpfullName = "Ngân hàng TMCP Bưu Điện Liên Việt"
                        },
                        new
                        {
                            CardProviderName = "KienLongBank",
                            CpfullName = "Ngân hàng TMCP Kiên Long"
                        },
                        new
                        {
                            CardProviderName = "KBank",
                            CpfullName = "Ngân hàng Đại chúng TNHH Kasikornbank"
                        },
                        new
                        {
                            CardProviderName = "KookminHN",
                            CpfullName = "Ngân hàng Kookmin - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "KEBHanaHCM",
                            CpfullName = "Ngân hàng KEB Hana – Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "KEBHANAHN",
                            CpfullName = "Công ty Tài chính TNHH MTV Mirae Asset (Việt Nam)"
                        },
                        new
                        {
                            CardProviderName = "Citibank",
                            CpfullName = "Ngân hàng Citibank, N.A. - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "KookminHCM",
                            CpfullName = "Ngân hàng Kookmin - Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "VBSP",
                            CpfullName = "Ngân hàng Chính sách Xã hội"
                        },
                        new
                        {
                            CardProviderName = "Woori",
                            CpfullName = "Ngân hàng TNHH MTV Woori Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "VRB",
                            CpfullName = "Ngân hàng Liên doanh Việt - Nga"
                        },
                        new
                        {
                            CardProviderName = "UnitedOverseas",
                            CpfullName = "Ngân hàng United Overseas - Chi nhánh TP. Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "StandardChartered",
                            CpfullName = "Ngân hàng TNHH MTV Standard Chartered Bank Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "PublicBank",
                            CpfullName = "Ngân hàng TNHH MTV Public Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Nonghyup",
                            CpfullName = "Ngân hàng Nonghyup - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "IndovinaBank",
                            CpfullName = "Ngân hàng TNHH Indovina"
                        },
                        new
                        {
                            CardProviderName = "IBKHCM",
                            CpfullName = "Ngân hàng Công nghiệp Hàn Quốc - Chi nhánh TP. Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "IBKHN",
                            CpfullName = "Ngân hàng Công nghiệp Hàn Quốc - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "HSBC",
                            CpfullName = "Ngân hàng TNHH MTV HSBC (Việt Nam)"
                        },
                        new
                        {
                            CardProviderName = "HongLeong",
                            CpfullName = "Ngân hàng TNHH MTV Hong Leong Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "GPBank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Dầu Khí Toàn Cầu"
                        },
                        new
                        {
                            CardProviderName = "DongABank",
                            CpfullName = "Ngân hàng TMCP Đông Á"
                        },
                        new
                        {
                            CardProviderName = "DBSBank",
                            CpfullName = "DBS Bank Ltd - Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "CIMB",
                            CpfullName = "Ngân hàng TNHH MTV CIMB Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "CBBank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Xây dựng Việt Nam"
                        });
                });

            modelBuilder.Entity("Repositories.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("C000000001")
                        .HasColumnName("CustomerID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CardName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("CardProviderName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("TaxNumber")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8B16F035F");

                    b.HasIndex("AccountId");

                    b.HasIndex("CardProviderName");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = "C000000001",
                            AccountId = "AC00000001",
                            CardName = "Visa Platinum",
                            CardNumber = 1234567890123456L,
                            CardProviderName = "Vietcombank",
                            TaxNumber = 123456789L
                        },
                        new
                        {
                            CustomerId = "C000000002",
                            AccountId = "AC00000003",
                            CardName = "MasterCard Gold",
                            CardNumber = 9876543210987654L,
                            CardProviderName = "BIDV",
                            TaxNumber = 987654321L
                        },
                        new
                        {
                            CustomerId = "C000000003",
                            AccountId = "AC00000005",
                            CardName = "JCB Standard",
                            CardNumber = 4561237894561237L,
                            CardProviderName = "Techcombank",
                            TaxNumber = 456123789L
                        },
                        new
                        {
                            CustomerId = "C000000004",
                            AccountId = "AC00000007",
                            CardName = "Visa Infinite",
                            CardNumber = 7418529638527418L,
                            CardProviderName = "Sacombank",
                            TaxNumber = 741852963L
                        },
                        new
                        {
                            CustomerId = "C000000005",
                            AccountId = "AC00000009",
                            CardName = "MasterCard Standard",
                            CardNumber = 3692581473692581L,
                            CardProviderName = "MBBank",
                            TaxNumber = 369258147L
                        });
                });

            modelBuilder.Entity("Repositories.Models.CustomerWallet", b =>
                {
                    b.Property<string>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("CW00000001")
                        .HasColumnName("WalletID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("WalletId")
                        .HasName("PK__Customer__84D4F92E55E9A551");

                    b.HasIndex("AccountId");

                    b.ToTable("CustomerWallet", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.DepositInformation", b =>
                {
                    b.Property<string>("DepositId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DepositId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("DepositInformations");
                });

            modelBuilder.Entity("Repositories.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGoodReview")
                        .HasColumnType("bit");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Repositories.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Account1Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Account2Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepositId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("Account1Id");

                    b.HasIndex("Account2Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Repositories.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PaidPrice")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("Quantity")
                        .IsRequired()
                        .HasColumnType("float");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Repositories.Models.PayoutHistory", b =>
                {
                    b.Property<string>("PayoutId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PayoutDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PayoutId");

                    b.HasIndex("AccountId");

                    b.ToTable("PayoutHistories");
                });

            modelBuilder.Entity("Repositories.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("P000000001")
                        .HasColumnName("ProductID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DamageDetail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PcateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PCateID");

                    b.Property<decimal?>("PercentageOfDamage")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("PurchaseType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StockQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6EDEFCE57C4");

                    b.HasIndex("AccountId");

                    b.HasIndex("PcateId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = "P000000001",
                            AccountId = "AC00000002",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000002",
                            Discount = 10.00m,
                            Location = "Ho Chi Minh",
                            PcateId = "PC00000001",
                            PercentageOfDamage = 10.00m,
                            ProductDesc = "Điện thoại Apple iPhone 14 mới",
                            ProductName = "iPhone 14",
                            ProductPrice = 20000000.00m,
                            PurchaseDate = new DateOnly(2024, 1, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000002",
                            AccountId = "AC00000004",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000004",
                            Discount = 5.00m,
                            Location = "Hanoi",
                            PcateId = "PC00000002",
                            PercentageOfDamage = 20.00m,
                            ProductDesc = "Laptop Dell XPS 13 2023",
                            ProductName = "Dell XPS 13",
                            ProductPrice = 35000000.00m,
                            PurchaseDate = new DateOnly(2024, 2, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000003",
                            AccountId = "AC00000006",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000006",
                            Discount = 20.00m,
                            Location = "Can Tho",
                            PcateId = "PC00000003",
                            PercentageOfDamage = 15.00m,
                            ProductDesc = "Giày thể thao Nike Air Jordan",
                            ProductName = "Giày Nike Air",
                            ProductPrice = 5000000.00m,
                            PurchaseDate = new DateOnly(2024, 3, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000004",
                            AccountId = "AC00000008",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000008",
                            Discount = 15.00m,
                            Location = "Da Nang",
                            PcateId = "PC00000004",
                            PercentageOfDamage = 5.00m,
                            ProductDesc = "Áo thun nữ cotton",
                            ProductName = "Áo thun nữ",
                            ProductPrice = 300000.00m,
                            PurchaseDate = new DateOnly(2024, 4, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000005",
                            AccountId = "AC00000010",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000010",
                            Discount = 10.00m,
                            Location = "Hue",
                            PcateId = "PC00000005",
                            PercentageOfDamage = 40.00m,
                            ProductDesc = "Nồi cơm điện Toshiba",
                            ProductName = "Nồi cơm điện",
                            ProductPrice = 2000000.00m,
                            PurchaseDate = new DateOnly(2024, 5, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000006",
                            AccountId = "AC00000002",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000002",
                            Discount = 5.00m,
                            Location = "Quang Ninh",
                            PcateId = "PC00000006",
                            PercentageOfDamage = 50.00m,
                            ProductDesc = "Tai nghe Sony WH-1000XM4",
                            ProductName = "Tai nghe Sony",
                            ProductPrice = 8000000.00m,
                            PurchaseDate = new DateOnly(2024, 6, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000007",
                            AccountId = "AC00000004",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000004",
                            Discount = 0.00m,
                            Location = "Nha Trang",
                            PcateId = "PC00000007",
                            PercentageOfDamage = 12.00m,
                            ProductDesc = "Sách Python cho người mới",
                            ProductName = "Sách lập trình",
                            ProductPrice = 250000.00m,
                            PurchaseDate = new DateOnly(2024, 7, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000008",
                            AccountId = "AC00000006",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000006",
                            Discount = 10.00m,
                            Location = "Vinh",
                            PcateId = "PC00000008",
                            PercentageOfDamage = 35.00m,
                            ProductDesc = "Bộ xếp hình lego 1000 mảnh",
                            ProductName = "Bộ lego",
                            ProductPrice = 1200000.00m,
                            PurchaseDate = new DateOnly(2024, 8, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000009",
                            AccountId = "AC00000008",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000008",
                            Discount = 5.00m,
                            Location = "Hanoi",
                            PcateId = "PC00000009",
                            PercentageOfDamage = 44.00m,
                            ProductDesc = "Bàn phím cơ RGB",
                            ProductName = "Bàn phím cơ",
                            ProductPrice = 1500000.00m,
                            PurchaseDate = new DateOnly(2024, 9, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        },
                        new
                        {
                            ProductId = "P000000010",
                            AccountId = "AC00000010",
                            CreatedAt = new DateOnly(1, 1, 1),
                            CreatedBy = "AC00000010",
                            Discount = 10.00m,
                            Location = "Tay Ninh",
                            PcateId = "PC00000010",
                            PercentageOfDamage = 10.00m,
                            ProductDesc = "Xe đạp địa hình",
                            ProductName = "Xe đạp thể thao",
                            ProductPrice = 5000000.00m,
                            PurchaseDate = new DateOnly(2024, 10, 1),
                            PurchaseType = "Mua ngay",
                            Status = "Active",
                            StockQuantity = 1.0
                        });
                });

            modelBuilder.Entity("Repositories.Models.ProductCategory", b =>
                {
                    b.Property<string>("PcateId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("PC00000001")
                        .HasColumnName("PCateID");

                    b.Property<string>("PcateDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PCateDesc");

                    b.Property<string>("PcateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PCateName");

                    b.Property<string>("PcateStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PCateStatus");

                    b.HasKey("PcateId")
                        .HasName("PK__ProductC__5DF9FF092873E01E");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            PcateId = "PC00000001",
                            PcateDesc = "Các loại điện thoại di động",
                            PcateName = "Điện thoại",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000002",
                            PcateDesc = "Các loại máy tính xách tay",
                            PcateName = "Laptop",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000003",
                            PcateDesc = "Quần áo, giày dép nam",
                            PcateName = "Thời trang nam",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000004",
                            PcateDesc = "Quần áo, giày dép nữ",
                            PcateName = "Thời trang nữ",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000005",
                            PcateDesc = "Sản phẩm cho gia đình",
                            PcateName = "Đồ gia dụng",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000006",
                            PcateDesc = "Các thiết bị điện tử",
                            PcateName = "Đồ điện tử",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000007",
                            PcateDesc = "Các loại sách",
                            PcateName = "Sách",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000008",
                            PcateDesc = "Đồ chơi trẻ em",
                            PcateName = "Đồ chơi",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000009",
                            PcateDesc = "Tai nghe, bàn phím, chuột",
                            PcateName = "Phụ kiện công nghệ",
                            PcateStatus = "Active"
                        },
                        new
                        {
                            PcateId = "PC00000010",
                            PcateDesc = "Các loại xe đạp, xe máy",
                            PcateName = "Xe cộ",
                            PcateStatus = "Active"
                        });
                });

            modelBuilder.Entity("Repositories.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReportId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Repositories.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("DepositId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions", t =>
                        {
                            t.HasCheckConstraint("CHK_DepositId_For_Barter", "(TransactionType ='Buy' AND DepositId IS NULL) OR (TransactionType = 'Barter' AND DepositId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Repositories.Models.Wishlist", b =>
                {
                    b.Property<string>("WishId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("W000000001")
                        .HasColumnName("WishID");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ProductID");

                    b.HasKey("WishId")
                        .HasName("PK__Wishlist__64BA6541F2011F05");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Customer", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("customer_accountid_foreign");

                    b.HasOne("Repositories.Models.CardProvider", "CardProviderNameNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("CardProviderName")
                        .HasConstraintName("customer_cardprovider_foreign");

                    b.Navigation("Account");

                    b.Navigation("CardProviderNameNavigation");
                });

            modelBuilder.Entity("Repositories.Models.CustomerWallet", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("CustomerWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("customerwallet_accountid_foreign");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Models.DepositInformation", b =>
                {
                    b.HasOne("Repositories.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Models.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.Feedback", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Repositories.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repositories.Models.Order", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account1")
                        .WithMany("OrderAsOwner1")
                        .HasForeignKey("Account1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repositories.Models.Account", "Account2")
                        .WithMany("OrderAsOwner2")
                        .HasForeignKey("Account2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("Repositories.Models.OrderDetail", b =>
                {
                    b.HasOne("Repositories.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repositories.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repositories.Models.PayoutHistory", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("PayoutHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Models.Product", b =>
                {
                    b.HasOne("Repositories.Models.Account", "Account")
                        .WithMany("Products")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("product_accountid_foreign");

                    b.HasOne("Repositories.Models.ProductCategory", "Pcate")
                        .WithMany("Products")
                        .HasForeignKey("PcateId")
                        .IsRequired()
                        .HasConstraintName("product_pcateid_foreign");

                    b.Navigation("Account");

                    b.Navigation("Pcate");
                });

            modelBuilder.Entity("Repositories.Models.Report", b =>
                {
                    b.HasOne("Repositories.Models.Account", null)
                        .WithMany("Reports")
                        .HasForeignKey("AccountId");

                    b.HasOne("Repositories.Models.Product", "Product")
                        .WithMany("Reports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repositories.Models.Transaction", b =>
                {
                    b.HasOne("Repositories.Models.DepositInformation", "DepositInformation")
                        .WithMany()
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repositories.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepositInformation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repositories.Models.Account", b =>
                {
                    b.Navigation("CustomerWallets");

                    b.Navigation("Customers");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderAsOwner1");

                    b.Navigation("OrderAsOwner2");

                    b.Navigation("PayoutHistories");

                    b.Navigation("Products");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Repositories.Models.CardProvider", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Repositories.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repositories.Models.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Repositories.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
