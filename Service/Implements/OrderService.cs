using CloudinaryDotNet.Actions;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Repositories.DTO;
using Repositories.Interfaces;
using Repositories.Models;
using Services.Common;
using Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace Services.Implements
{
    public class OrderService : IOrderService
    {
        private readonly IOrderRepository _orderRepository;
        private readonly IAccountRepository _accountRepository;
        private readonly IProductRepository _productRepository;
        private readonly IDepositRepository _depositRepository;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public OrderService(IOrderRepository orderRepository, IAccountRepository accountRepository, IProductRepository productRepository, IDepositRepository depositRepository, IHttpContextAccessor httpContextAccessor)
        {
            _orderRepository = orderRepository;
            _accountRepository = accountRepository;
            _productRepository = productRepository;
            _httpContextAccessor = httpContextAccessor;
            _depositRepository = depositRepository;
        }
        public async Task<string> AutoGenerateOrderId()
        {
            string newOrderId = "";
            string latestOrderId = await _orderRepository.GetLatestOrderIdAsync();
            if (string.IsNullOrEmpty(latestOrderId))
            {
                newOrderId = "O000000001";
            }
            else
            {
                int numericpart = int.Parse(latestOrderId.Substring(1));
                int newnumericpart = numericpart + 1;
                newOrderId = $"O{newnumericpart:d9}";
            }
            return newOrderId;
        }

        public async Task<dynamic> RequireAnExchangeOrderAsync(CreateExOrderDTO orderDTO)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }

            var cartItem = await _orderRepository.GetOrderDetailById(orderDTO.CartItemId);
            if (cartItem == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your cart items",
                    StatusCode = 404
                };
            }

            if (cartItem.AccountId != customer.AccountId)
            {
                return new ApiResponse
                {
                    Message = $"This cart item {cartItem.Product.ProductName} does not belong to your account",
                    StatusCode = 403
                };
            }
            var product = await _productRepository.GetProductByProductIdAsync(cartItem.ProductId);
            if (product == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your product",
                    StatusCode = 404
                };
            }
            string detailDTO = null;
            if (string.IsNullOrEmpty(orderDTO.Detail))
            {
                detailDTO = $"Total of product in order is {cartItem.Quantity} {product.ProductName}";
            }
            else
            {
                detailDTO = orderDTO.Detail;
            }

            var order = new Order
            {
                OrderId = await AutoGenerateOrderId(),
                Account1Id = customer.AccountId,
                Account2Id = product.AccountId,
                Detail = detailDTO,
                OrderType = "Exchange",
                Status = 1, // 0.Require Exchange Product - 1. Accepted - 2. Refused - 3. Confirming Buy Order 4. Payment - 5. Shipped successfully
                PaymentStatus = 0, // 0. Paying 1.Paid
                OrderDate = DateTime.Now,
                FullName = customer.FullName,
                Address = customer.Address,
                PhoneNumber = orderDTO.PhoneNumber,
            };

            var deposit = new DepositInformation
            {
                DepositId = await _depositRepository.AutoGenerateDepositInformationId(),
                UserId = customer.AccountId,
                Amount = (double)(cartItem.PaidPrice * 0.4),
                Status = "Not Completely",
                CreatedAt = DateTime.Now,
            };
            order.TotalMoney = (double)(cartItem.PaidPrice - (deposit.Amount));
            await _depositRepository.CreateDepositInformation(deposit);
            var result = await _orderRepository.CreateOrder(order);
            //var newOrder = await _orderRepository.CreateOrder(orderDTO);
            return new ApiResponse
            {
                Message = "Send Required Successfully",
                StatusCode = 201,
                Data = result
            };
        }


        public async Task<dynamic> AcceptRequiredExchangeOrderAsync(string orderId)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }
            var order = await _orderRepository.GetOrderById(orderId);
            if (order == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your order",
                    StatusCode = 404
                };
            }
            if (order.Account2Id != customer.AccountId)
            {
                return new ApiResponse
                {
                    Message = $"This order {order.OrderId} does not belong to your account",
                    StatusCode = 403
                };
            }
            order.Status = 1;
            await _orderRepository.UpdateOrder(order);
            var orderDetailOfExchanger = await _orderRepository.GetOrderDetailByOrderIdAndAccountId(orderId, order.Account1Id);

            var orderDetail = new OrderDetail
            {
                OrderId = orderId,
                ProductId = orderDetailOfExchanger.ProductId,
                Quantity = orderDetailOfExchanger.Quantity,
                PaidPrice = orderDetailOfExchanger.PaidPrice,
                OrderNumber = "Empty",
                AccountId = customer.AccountId
            };
            await _orderRepository.CreateOrderDetail(orderDetail);
            return new ApiResponse
            {
                Message = "Accept Order Successfully",
                StatusCode = 200,
                Data = new
                {
                    order.OrderId,
                    order.FullName,
                    order.OrderDate,
                    order.Status,
                    order.TotalMoney,
                    order.PaymentStatus,
                    order.Address,
                    order.PhoneNumber,
                    orderDetail,
                }
            };
        }

        public async Task<dynamic> RefuseRequiredExchangeOrderAsync(string orderId)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }
            var order = await _orderRepository.GetOrderById(orderId);
            if (order == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your order",
                    StatusCode = 404
                };
            }
            if (order.Account2Id != customer.AccountId)
            {
                return new ApiResponse
                {
                    Message = $"This order {order.OrderId} does not belong to your account",
                    StatusCode = 403
                };
            }

            order.Status = 2;
            await _orderRepository.UpdateOrder(order);
            return new ApiResponse
            {
                Message = "Refused Order Successfully",
                StatusCode = 200,
                Data = order
            };
        }

        public async Task<dynamic> CreateAnOrderForExchangeAsync(string orderId)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }
            var order = await _orderRepository.GetOrderById(orderId);
            if (order == null)
            {
                return new ApiResponse
                {
                    Message = "Order is not already existed",
                    StatusCode = 404
                };
            }
            var orderDetail = await _orderRepository.GetOrderDetailByOrderIdAndAccountId(orderId, customer.AccountId);
            if (orderDetail == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your order detail",
                    StatusCode = 404
                };
            }
            var product1 = await _productRepository.GetProductByProductIdAsync(orderDetail.ProductId);
            if (product1 == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your product",
                    StatusCode = 404
                };
            }
            string accountIdOfOther = null;
            if (order.Account1Id == customer.AccountId)
            {
                accountIdOfOther = order.Account2Id;
            }
            else
            {
                accountIdOfOther = order.Account1Id;
            }
            var orderDetailOfOrder = await _orderRepository.GetOrderDetailByOrderIdAndAccountId(order.OrderId, accountIdOfOther);
            if (orderDetailOfOrder == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your order detail",
                    StatusCode = 404
                };
            }
            var product2 = await _productRepository.GetProductByProductIdAsync(orderDetailOfOrder.ProductId);
            if (product2 == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your product",
                    StatusCode = 404
                };
            }
            var deposit = await _depositRepository.GetDepositInformationById(order.DepositId);
            if (deposit == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your deposit",
                    StatusCode = 404
                };
            }

            if (order.Status == 2)
            {
                return new ApiResponse
                {
                    Message = "Cannot execute this order! This transaction was declined by one of the parties.",
                    StatusCode = 409
                };
            }
            order.Status = 3;

            if (product1.ProductPrice == product1.ProductPrice)
            {
                orderDetail.PaidPrice = deposit.Amount;
                orderDetailOfOrder.PaidPrice = orderDetail.PaidPrice;
            }
            else if (product1.ProductPrice > product2.ProductPrice)
            {
                orderDetail.PaidPrice = deposit.Amount + (double)(product1.ProductPrice - product2.ProductPrice);
                orderDetailOfOrder.PaidPrice = deposit.Amount - (double)(product1.ProductPrice - product2.ProductPrice);
            }
            else if (product1.ProductPrice < product2.ProductPrice)
            {
                orderDetail.PaidPrice = deposit.Amount - (double)(product1.ProductPrice - product2.ProductPrice);
                orderDetailOfOrder.PaidPrice = deposit.Amount + (double)(product1.ProductPrice - product2.ProductPrice);
            }
            orderDetail.OrderNumber = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10).ToUpper();
            orderDetailOfOrder.OrderNumber = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10).ToUpper();
            await _orderRepository.UpdateOrderDetail(orderDetail);
            await _orderRepository.UpdateOrder(order);
            await _orderRepository.UpdateOrderDetail(orderDetailOfOrder);
            return new ApiResponse
            {
                Message = "Create An Order Sucessfully",
                StatusCode = 201,
                Data = new
                {
                    order.OrderId,
                    order.FullName,
                    order.OrderDate,
                    order.Status,
                    order.TotalMoney,
                    order.PaymentStatus,
                    order.Address,
                    order.PhoneNumber,
                    orderDetail,
                    orderDetailOfOrder
                }
            };
        }

        public async Task<dynamic> CreateAnOrderBuyFromCartAsync(CreateAnBuyOrderDTO orderDTO)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }
            if (orderDTO == null)
            {
                return new ApiResponse
                {
                    Message = "All fields must be filled in",
                    StatusCode = 400
                };
            }
            var cartItems = await _orderRepository.GetListCartItemByIdsString(orderDTO.CartItemIds);
            double totalAmount = 0;

            foreach (var item in cartItems)
            {
                if (item.AccountId != customer.AccountId)
                {
                    return new ApiResponse
                    {
                        Message = $"This cart {item.OrderDetailId} does not belong to your account",
                        StatusCode = 403
                    };
                }
                var productInItem = await _productRepository.GetProductByProductIdAsync(item.ProductId);
                totalAmount += (item.PaidPrice ?? 0) * (1 - (double)(productInItem.Discount ?? 0)); // Assuming you have Price and quantity fields in the CartItem model
                if (productInItem == null)
                {
                    return new ApiResponse
                    {
                        Message = "Product cannot be found",
                        StatusCode = 404
                    };
                }
                productInItem.StockQuantity -= (double)item.Quantity;
                if (productInItem.StockQuantity < 0)
                {
                    return new ApiResponse
                    {
                        Message = $"Product {productInItem.ProductName} is out of stock",
                        StatusCode = 400
                    };
                }
                var sellerId = productInItem.AccountId;
            }
            if (cartItems.Count == 0)
            {
                return new ApiResponse
                {
                    Message = "Cart Items do not exist",
                    StatusCode = 404
                };
            }
            else
            {
                var newOrder = new Order
                {
                    OrderId = await AutoGenerateOrderId(),
                    Account1Id = customer.AccountId,
                    Account2Id = null,
                    Detail = $"Total of product in order is {cartItems.Count}",
                    OrderType = "Buy",
                    Status = 1, // 1. Confirming order - 4. Delivering - 5. Shipped successfully
                    PaymentStatus = 0, // 0. Paying 1.Paid
                    TotalMoney = totalAmount,
                    OrderDate = DateTime.Now,
                    FullName = customer.FullName,
                    Address = customer.Address,
                    PhoneNumber = customer.Phone.ToString()
,
                };
                await _orderRepository.CreateOrder(newOrder);
                // Detach the tracked cartItems to prevent conflicts
                foreach (var item in cartItems)
                {
                    await _orderRepository.DetachEntityAsync(item);
                }
                var orderDetails = cartItems.Select(ci => new OrderDetail
                {
                    OrderDetailId = ci.OrderDetailId,
                    OrderId = newOrder.OrderId,
                    ProductId = ci.ProductId,
                    Quantity = ci.Quantity,
                    PaidPrice = ci.PaidPrice,
                    OrderNumber = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10).ToUpper(),
                    AccountId = newOrder.Account1Id,
                }).ToList();
                await _orderRepository.UpdateOrderDetails(orderDetails);
                return new ApiResponse
                {
                    Message = "Create Order Successfully",
                    StatusCode = 201,
                    Data = new
                    {
                        newOrder.OrderId,
                        newOrder.FullName,
                        newOrder.OrderDate,
                        newOrder.Status,
                        newOrder.TotalMoney,
                        newOrder.PaymentStatus,
                        newOrder.Address,
                        newOrder.PhoneNumber,
                        OrderDetails = orderDetails.Select(od => new
                        {
                            od.OrderDetailId,
                            od.ProductId,
                            od.Quantity,
                            od.PaidPrice,
                            od.OrderNumber,
                            od.AccountId,
                        })
                    }
                };
            }
        }

        public async Task<double> RetrieveTotalMoneyByOrderId(string orderId)
        {
            return await _orderRepository.GetTotalMoneyOfOrder(orderId);
        }


        public async Task FinishDeliveringStage(string orderId)
        {
            var order = await _orderRepository.GetOrderById(orderId);
            order.Status = 5;
            order.PaymentStatus = 1;
            await _orderRepository.UpdateOrder(order);
        }

        public async Task<List<Order>> GetAllOrders() => await _orderRepository.GetAllOrders();
        public async Task<List<Order>> GetOrdersByTypeAsync(string orderType) => await _orderRepository.GetOrdersByTypeAsync(orderType);
        public async Task<int> GetNumberOfOrders() => await _orderRepository.GetNumberOfOrders();
        public async Task<int> GetNumberOfOrderBasedOnStatus(int status) => await _orderRepository.GetNumberOfOrderBasedOnStatus(status);
        public async Task<dynamic> GetNumberOrderOfCustomerByStatus(int status)
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }

            return await _orderRepository.GetNumberOrderOfCustomerByStatus(customer.AccountId, status);
        }
        public async Task<dynamic> GetNumberOrderOfCustomer()
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return new ApiResponse
                {
                    Message = "Cannot find your account",
                    StatusCode = 404
                };
            }
            return await _orderRepository.GetNumberOrderOfCustomer(customer.AccountId);
        }

        public async Task<double> GetTotalEarnings()
        {
            var customerEmail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
            var customer = await _accountRepository.GetAccountByEmailAsync(customerEmail);
            if (customer == null)
            {
                return -1;
            }
            return await _orderRepository.GetEarningOnAllOrders(customer.AccountId);
        }
        public async Task CheckoutRequest(CheckoutRequest request)
        {
            var order = await _orderRepository.GetOrderById(request.OrderId);
            order.PhoneNumber = request.PhoneNumber;
            order.FullName = request.FullName;
            order.Address = request.Address;
            await _orderRepository.UpdateOrder(order);
        }
    }
}


//public async Task<dynamic> CreateAnOrderFromCartAsync(OrderDetailDTO orderDTO)
//{
//    var accountEmail = TokenDecoder.GetEmailFromToken(orderDTO.OrderId);
//    var acc = await _accountRepository.GetAccountByEmailAsync(accountEmail);
//    if (acc == null)
//    {
//        return "Cannot find your account";
//    }

//    double totalAmount = 0;

//    foreach (var item in orderDTO)
//    {

//        if (item.AccountId != acc.AccountId)
//        {
//            return new
//            {
//                StatusCode = 403,
//                Message = $"This cart {item.OrderDetailId} is not belong to your account"
//            };
//        }
//        totalAmount += item.PaidPrice; // Assuming you have Price and quantity fields in the CartItem model
//        var product = await _productRepository.GetProductByProductIdAsync(item.productId);
//        if (product == null)
//        {
//            return "product cannot be found";
//        }
//        product.quantity = product.quantity - item.quantity;
//        var sellerId = product.AccountId;
//    }
//    if (cartItems.Count == 0)
//    {
//        return new
//        {
//            Message = "Cart Items is not exist",
//            StatusCode = 404
//        };
//    }
//    else
//    {
//        var newOrder = new Order
//        {
//            OrderId = await AutoGenerateOrderId(),
//            AccountId = acc.AccountId,
//            SellerId = null,
//            Detail = $"Total of product in order is {cartItems.Count}",
//            Status = 1, // 1. Confirming order - 4. Delivering - 5. Shipped successfully
//            PaymentStatus = 0, // 0. Paying 1.Paid
//            TotalMoney = totalAmount,
//            Date = DateOnly.FromDateTime(DateTime.Now),
//            FullName = acc.FullName,
//            Address = acc.Address,
//            PhoneNumber = acc.Phone,
//            OrderDetails = cartItems
//        };
//        await _orderRepository.CreateOrder(newOrder);
//        // Detach the tracked cartItems to prevent conflicts
//        foreach (var item in cartItems)
//        {
//            _context.Entry(item).State = EntityState.Detached;
//        }

//        var orderDetails = cartItems.Select(ci => new OrderDetail
//        {
//            OrderDetailId = ci.OrderDetailId,
//            OrderId = newOrder.OrderId,
//            productId = ci.productId,
//            quantity = ci.quantity,
//            PaidPrice = ci.PaidPrice,
//            OrderNumber = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10).ToUpper(),
//            AccountId = newOrder.AccountId,
//        }).ToList();
//        await _cartRepository.UpdateOrderDetails(orderDetails);
//        return new
//        {
//            StatusCode = 201,
//            Message = "Create Order Successfull",
//            NewOrder = new
//            {
//                newOrder.OrderId,
//                newOrder.FullName,
//                newOrder.Date,
//                newOrder.Status,
//                newOrder.TotalMoney,
//                newOrder.PaymentStatus,
//                newOrder.Address,
//                newOrder.PhoneNumber,
//                OrderDetails = orderDetails.Select(od => new
//                {
//                    od.OrderDetailId,
//                    od.productId,
//                    od.quantity,
//                    od.PaidPrice,
//                    od.OrderNumber,
//                    od.AccountId,
//                })
//            },

//        };
//    }

//}
//public async Task CheckoutRequest(CheckoutRequest request)
//{
//    var order = await _orderRepository.GetOrderById(request.OrderId);
//    order.PhoneNumber = request.PhoneNumber;
//    order.FullName = request.FullName;
//    order.Address = request.Address;
//    await _orderRepository.UpdateOrder(order);
//}
//public async Task<dynamic> GetOrderDetailsOfCustomer(string sellerId)
//{
//    return await _orderRepository.getorderdetail(sellerId);
//}
//public async Task<dynamic> GetOrderDetailsOfBuyer(string userEmail)
//{
//    var acc = await _accountRepository.GetAccountByEmailAsync(userEmail);
//    if (acc == null)
//    {
//        return "Cannot find your account";
//    }
//    return await _orderRepository.GetOrderDetailsOfBuyer(acc.AccountId);
//}